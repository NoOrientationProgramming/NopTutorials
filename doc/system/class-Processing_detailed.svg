<?xml version="1.0" encoding="UTF-8" standalone="no"?><svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" contentStyleType="text/css" height="1316px" preserveAspectRatio="none" style="width:670px;height:1316px;background:#FFFFFF;" version="1.1" viewBox="0 0 670 1316" width="670px" zoomAndPan="magnify"><defs/><g><!--MD5=[c1cb23d6e432624f6cb8edc9afe0423f]
class Processing--><g id="elem_Processing"><rect codeLine="10" fill="#FFFFFF" height="984.9219" id="Processing" rx="2.5" ry="2.5" style="stroke:#000000;stroke-width:0.5;" width="636" x="9" y="31.2901"/><ellipse cx="285.75" cy="47.2901" fill="#A9DCDF" rx="11" ry="11" style="stroke:#181818;stroke-width:1.0;"/><path d="M285.8594,42.6338 L284.7031,47.712 L287.0313,47.712 L285.8594,42.6338 Z M284.375,40.3995 L287.3594,40.3995 L290.7188,52.7901 L288.2656,52.7901 L287.5,49.7276 L284.2188,49.7276 L283.4688,52.7901 L281.0313,52.7901 L284.375,40.3995 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="14" font-style="italic" lengthAdjust="spacing" textLength="74" x="306.25" y="52.1368">Processing</text><line style="stroke:#000000;stroke-width:0.5;" x1="10" x2="644" y1="63.2901" y2="63.2901"/><ellipse cx="20" cy="76.9385" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="98" x="29" y="80.2852">void tickTree()</text><ellipse cx="20" cy="93.2354" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="149" x="29" y="96.5821">bool progress() const</text><ellipse cx="20" cy="109.5323" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="174" x="29" y="112.879">Success success() const</text><ellipse cx="20" cy="125.8292" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="118" x="29" y="129.1758">void unusedSet()</text><ellipse cx="20" cy="142.126" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="258" x="29" y="145.4727">void procTreeDisplaySet(bool display)</text><ellipse cx="20" cy="158.4229" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="145" x="29" y="161.7696">bool initDone() const</text><ellipse cx="20" cy="174.7198" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="181" x="29" y="178.0665">bool processDone() const</text><ellipse cx="20" cy="191.0167" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="194" x="29" y="194.3633">bool shutdownDone() const</text><ellipse cx="20" cy="207.3135" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="610" x="29" y="210.6602">int processTreeStr(char *pBuf, char *pBufEnd, bool detailed = true, bool colored = false)</text><ellipse cx="20" cy="223.6104" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="256" x="29" y="226.9571">void undrivenSet(Processing *pChild)</text><ellipse cx="20" cy="239.9073" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="225" x="29" y="243.254">void destroy(Processing *pChild)</text><ellipse cx="20" cy="256.2042" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="155" x="29" y="259.5508">void applicationClose()</text><ellipse cx="20" cy="272.501" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="427" x="29" y="275.8477">void globalDestructorRegister(GlobDestructorFunc globDestr)</text><ellipse cx="20" cy="288.7979" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="279" x="29" y="292.1446">const char *strrchr(const char *x, char y)</text><ellipse cx="20" cy="305.0948" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="356" x="29" y="308.4415">void *memcpy(void *to, const void *from, size_t cnt)</text><ellipse cx="20" cy="321.3917" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="252" x="29" y="324.7383">void showAddressInIdSet(uint8_t val)</text><ellipse cx="20" cy="337.6885" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="264" x="29" y="341.0352">void disableTreeDefaultSet(uint8_t val)</text><line style="stroke:#000000;stroke-width:1.0;" x1="10" x2="644" y1="348.337" y2="348.337"/><polygon fill="#FFFF44" points="20,356.9854,24,360.9854,20,364.9854,16,360.9854" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="210" x="29" y="365.3321">Processing(const char *name)</text><polygon fill="#FFFF44" points="20,373.2823,24,377.2823,20,381.2823,16,377.2823" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" font-style="italic" lengthAdjust="spacing" textLength="96" x="29" y="381.629">~Processing()</text><polygon fill="#FFFF44" points="20,389.5792,24,393.5792,20,397.5792,16,393.5792" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="208" x="29" y="397.9258">const char *procName() const</text><polygon fill="#FFFF44" points="20,405.876,24,409.876,20,413.876,16,409.876" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="515" x="29" y="414.2227">Processing *start(Processing *pChild, DriverMode driver = DrivenByParent)</text><polygon fill="#FFFF44" points="20,422.1729,24,426.1729,20,430.1729,16,426.1729" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="274" x="29" y="430.5196">Processing *cancel(Processing *pChild)</text><polygon fill="#FFFF44" points="20,438.4698,24,442.4698,20,446.4698,16,442.4698" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="264" x="29" y="446.8165">Processing *repel(Processing *pChild)</text><polygon fill="#FFFF44" points="20,454.7667,24,458.7667,20,462.7667,16,458.7667" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="365" x="29" y="463.1133">Processing *whenFinishedRepel(Processing *pChild)</text><polygon fill="#FFFF44" points="20,471.0635,24,475.0635,20,479.0635,16,475.0635" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" font-style="italic" lengthAdjust="spacing" textLength="124" x="29" y="479.4102">Success initialize()</text><polygon fill="#FFFF44" points="20,487.3604,24,491.3604,20,495.3604,16,491.3604" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" font-style="italic" lengthAdjust="spacing" textLength="154" x="29" y="495.7071">Success process() = 0</text><polygon fill="#FFFF44" points="20,503.6573,24,507.6573,20,511.6573,16,507.6573" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" font-style="italic" lengthAdjust="spacing" textLength="139" x="29" y="512.004">Success shutdown()</text><polygon fill="#FFFF44" points="20,519.9542,24,523.9542,20,527.9542,16,523.9542" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" font-style="italic" lengthAdjust="spacing" textLength="304" x="29" y="528.3008">void processInfo(char *pBuf, char *pBufEnd)</text><polygon fill="#FFFF44" points="20,536.251,24,540.251,20,544.251,16,540.251" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" font-style="italic" lengthAdjust="spacing" textLength="326" x="29" y="544.5977">size_t processTrace(char *pBuf, char *pBufEnd)</text><polygon fill="#FFFF44" points="20,552.5479,24,556.5479,20,560.5479,16,556.5479" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="187" x="29" y="560.8946">Success childrenSuccess()</text><polygon fill="#FFFF44" points="20,568.8448,24,572.8448,20,576.8448,16,572.8448" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="495" x="29" y="577.1915">size_t mncpy(void *dest, size_t destSize, const void *src, size_t srcSize)</text><polygon fill="#FFFF44" points="20,585.1417,24,589.1417,20,593.1417,16,589.1417" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="174" x="29" y="593.4883">DriverMode driver() const</text><polygon fill="#FFFF44" points="20,601.4385,24,605.4385,20,609.4385,16,605.4385" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="175" x="29" y="609.7852">uint8_t levelDriver() const</text><polygon fill="#FFFF44" points="20,617.7354,24,621.7354,20,625.7354,16,621.7354" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="434" x="29" y="626.0821">int procId(char *pBuf, char *pBufEnd, const Processing *pProc)</text><polygon fill="#FFFF44" points="20,634.0323,24,638.0323,20,642.0323,16,638.0323" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="503" x="29" y="642.379">int progressStr(char *pBuf, char *pBufEnd, const int val, const int maxVal)</text><polygon fill="none" points="20,650.3292,24,654.3292,20,658.3292,16,654.3292" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="100" x="29" y="658.6758">uint8_t mState</text><polygon fill="none" points="20,666.626,24,670.626,20,674.626,16,670.626" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="123" x="29" y="674.9727">uint8_t mStateOld</text><line style="stroke:#000000;stroke-width:1.0;" x1="10" x2="644" y1="682.2745" y2="682.2745"/><rect fill="#F24D5C" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="17" y="692.9229"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="87" x="29" y="699.2696">Processing()</text><rect fill="#F24D5C" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="17" y="709.2198"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="223" x="29" y="715.5665">Processing(const Processing &amp;)</text><rect fill="#F24D5C" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="17" y="725.5167"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="310" x="29" y="731.8633">Processing &amp;operator=(const Processing &amp;)</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="17" y="741.8135"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="137" x="29" y="748.1602">const char *mName</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="17" y="758.1104"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="205" x="29" y="764.4571">list&lt;Processing *&gt; mChildList</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="17" y="774.4073"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="141" x="29" y="780.754">mutex mChildListMtx</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="17" y="790.7042"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="127" x="29" y="797.0508">thread *mpThread</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="17" y="807.001"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="135" x="29" y="813.3477">Success mSuccess</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="17" y="823.2979"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="162" x="29" y="829.6446">uint16_t mNumChildren</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="17" y="839.5948"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="157" x="29" y="845.9415">uint8_t mStateAbstract</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="17" y="855.8917"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="136" x="29" y="862.2383">DriverMode mDriver</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="17" y="872.1885"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="136" x="29" y="878.5352">uint8_t mStatParent</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="17" y="888.4854"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="114" x="29" y="894.8321">uint8_t mStatDrv</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="17" y="904.7823"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="131" x="29" y="911.129">uint8_t mLevelTree</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="17" y="921.0792"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="139" x="29" y="927.4258">uint8_t mLevelDriver</text><rect fill="#F24D5C" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="17" y="937.376"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="264" x="29" y="943.7227">void parentalDrive(Processing *pChild)</text><rect fill="#F24D5C" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="17" y="953.6729"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="259" x="29" y="960.0196">void internalDrive(Processing *pChild)</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="17" y="969.9698"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="169" x="29" y="976.3165">uint8_t showAddressInId</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="17" y="986.2667"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="181" x="29" y="992.6133">uint8_t disableTreeDefault</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="17" y="1002.5635"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="310" x="29" y="1008.9102">list&lt;GlobDestructorFunc&gt; globalDestructors</text></g><!--MD5=[84ff7ea6cbe1073b072d3dffcd39692e]
class Verb_ing--><g id="elem_Verb_ing"><rect codeLine="72" fill="#FFFFFF" height="202.6719" id="Verb_ing" rx="2.5" ry="2.5" style="stroke:#000000;stroke-width:0.5;" width="600" x="27" y="1076.2901"/><ellipse cx="232.75" cy="1092.2901" fill="#ADD1B2" rx="11" ry="11" style="stroke:#181818;stroke-width:1.0;"/><path d="M235.7188,1097.9307 Q235.1406,1098.2276 234.5,1098.3682 Q233.8594,1098.5245 233.1563,1098.5245 Q230.6563,1098.5245 229.3281,1096.8838 Q228.0156,1095.2276 228.0156,1092.1026 Q228.0156,1088.9776 229.3281,1087.3213 Q230.6563,1085.6651 233.1563,1085.6651 Q233.8594,1085.6651 234.5,1085.8213 Q235.1563,1085.9776 235.7188,1086.2745 L235.7188,1088.9932 Q235.0938,1088.4151 234.5,1088.1495 Q233.9063,1087.8682 233.2813,1087.8682 Q231.9375,1087.8682 231.25,1088.9463 Q230.5625,1090.0088 230.5625,1092.1026 Q230.5625,1094.1963 231.25,1095.2745 Q231.9375,1096.337 233.2813,1096.337 Q233.9063,1096.337 234.5,1096.0713 Q235.0938,1095.7901 235.7188,1095.212 L235.7188,1097.9307 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="60" x="253.25" y="1097.1368">Verb_ing</text><rect fill="#FFFFFF" height="15.9688" style="stroke:#000000;stroke-width:1.0;stroke-dasharray:2.0,2.0;" width="118" x="512" y="1073.2901"/><text fill="#000000" font-family="sans-serif" font-size="12" font-style="italic" lengthAdjust="spacing" textLength="108" x="517" y="1085.4288">Present Participle</text><line style="stroke:#000000;stroke-width:0.5;" x1="28" x2="626" y1="1108.2901" y2="1108.2901"/><ellipse cx="38" cy="1121.9385" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="125" x="47" y="1125.2852">Verb_ing *create()</text><line style="stroke:#000000;stroke-width:1.0;" x1="28" x2="626" y1="1132.587" y2="1132.587"/><polygon fill="#FFFF44" points="38,1141.2354,42,1145.2354,38,1149.2354,34,1145.2354" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="70" x="47" y="1149.5821">Verb_ing()</text><polygon fill="#FFFF44" points="38,1157.5323,42,1161.5323,38,1165.5323,34,1161.5323" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" font-style="italic" lengthAdjust="spacing" textLength="83" x="47" y="1165.879">~Verb_ing()</text><line style="stroke:#000000;stroke-width:1.0;" x1="28" x2="626" y1="1173.1807" y2="1173.1807"/><rect fill="#F24D5C" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="35" y="1183.8292"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="299" x="47" y="1190.1758">Verb_ing(const Verb_ing &amp;) : Processing("")</text><rect fill="#F24D5C" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="35" y="1200.126"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="276" x="47" y="1206.4727">Verb_ing &amp;operator=(const Verb_ing &amp;)</text><rect fill="#F24D5C" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="35" y="1216.4229"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="127" x="47" y="1222.7696">Success initialize()</text><rect fill="#F24D5C" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="35" y="1232.7198"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="129" x="47" y="1239.0665">Success process()</text><rect fill="#F24D5C" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="35" y="1249.0167"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="142" x="47" y="1255.3633">Success shutdown()</text><rect fill="#F24D5C" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="35" y="1265.3135"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="304" x="47" y="1271.6602">void processInfo(char *pBuf, char *pBufEnd)</text></g><!--MD5=[30c28498d11c6b6cae89e7b6ccf56923]
link Processing to Processing--><g id="link_Processing_Processing"><path codeLine="86" d="M327,31.1601 C327,19.7301 327,13.2901 327,13.2901 C327,13.2901 663,13.2901 663,13.2901 C663,13.2901 663,1046.2901 663,1046.2901 C663,1046.2901 636,1046.2901 636,1046.2901 C636,1046.2901 636,1029.3201 636,1029.3201 " fill="none" id="Processing-to-Processing" style="stroke:#000000;stroke-width:1.0;"/><polygon fill="none" points="636,1016.3201,632,1022.3201,636,1028.3201,640,1022.3201,636,1016.3201" style="stroke:#000000;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacing" textLength="23" x="303.8023" y="19.6328">0..*</text><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacing" textLength="8" x="633.2422" y="1036.9831">1</text></g><!--MD5=[dbbfeafeb4235911a728dda71c62a3eb]
reverse link Processing to Verb_ing--><g id="link_Processing_Verb_ing"><path codeLine="87" d="M327,1036.5501 C327,1036.5501 327,1076.2501 327,1076.2501 " fill="none" id="Processing-backto-Verb_ing" style="stroke:#000000;stroke-width:1.0;"/><polygon fill="none" points="320,1036.5501,327,1016.5501,334,1036.5501,320,1036.5501" style="stroke:#000000;stroke-width:1.0;"/></g><rect fill="none" height="23.2813" style="stroke:none;stroke-width:1.0;" width="198" x="229" y="1284.962"/><text fill="#888888" font-family="sans-serif" font-size="10" font-weight="bold" lengthAdjust="spacing" textLength="71" x="229" y="1294.2442">Processing()</text><text fill="#888888" font-family="sans-serif" font-size="10" lengthAdjust="spacing" textLength="121" x="303" y="1294.2442">Class Diagram - Detailed</text><text fill="#888888" font-family="sans-serif" font-size="10" lengthAdjust="spacing" textLength="167" x="244.5" y="1305.8848">(C) DSP-Crowd Electronics GmbH</text><!--MD5=[0aeb14e096a7c65f5bdad1d63894ed53]
@startuml

skinparam linetype ortho
skinparam minClassWidth 600
skinparam class {
	BackgroundColor White
	ArrowColor Black
	BorderColor Black
}

abstract class Processing {
	+void tickTree()
	+bool progress() const
	+Success success() const
	+void unusedSet()
	+void procTreeDisplaySet(bool display)
	+bool initDone() const
	+bool processDone() const
	+bool shutdownDone() const
	+int processTreeStr(char *pBuf, char *pBufEnd, bool detailed = true, bool colored = false)
	+{static} void undrivenSet(Processing *pChild)
	+{static} void destroy(Processing *pChild)
	+{static} void applicationClose()
	+{static} void globalDestructorRegister(GlobDestructorFunc globDestr)
	+{static} const char *strrchr(const char *x, char y)
	+{static} void *memcpy(void *to, const void *from, size_t cnt)
	+{static} void showAddressInIdSet(uint8_t val)
	+{static} void disableTreeDefaultSet(uint8_t val)
	- -
	#Processing(const char *name)
	#{abstract} ~Processing()
	#const char *procName() const
	#Processing *start(Processing *pChild, DriverMode driver = DrivenByParent)
	#Processing *cancel(Processing *pChild)
	#Processing *repel(Processing *pChild)
	#Processing *whenFinishedRepel(Processing *pChild)
	#{abstract} Success initialize()
	#{abstract} Success process() = 0
	#{abstract} Success shutdown()
	#{abstract} void processInfo(char *pBuf, char *pBufEnd)
	#{abstract} size_t processTrace(char *pBuf, char *pBufEnd)
	#Success childrenSuccess()
	#size_t mncpy(void *dest, size_t destSize, const void *src, size_t srcSize)
	#DriverMode driver() const
	#uint8_t levelDriver() const
	#{static} int procId(char *pBuf, char *pBufEnd, const Processing *pProc)
	#{static} int progressStr(char *pBuf, char *pBufEnd, const int val, const int maxVal)
	#uint8_t mState
	#uint8_t mStateOld
	- -
	-Processing()
	-Processing(const Processing &)
	-Processing &operator=(const Processing &)
	-const char *mName
	-list<Processing *> mChildList
	-mutex mChildListMtx
	-thread *mpThread
	-Success mSuccess
	-uint16_t mNumChildren
	-uint8_t mStateAbstract
	-DriverMode mDriver
	-uint8_t mStatParent
	-uint8_t mStatDrv
	-uint8_t mLevelTree
	-uint8_t mLevelDriver
	-{static} void parentalDrive(Processing *pChild)
	-{static} void internalDrive(Processing *pChild)
	-{static} uint8_t showAddressInId
	-{static} uint8_t disableTreeDefault
	-{static} list<GlobDestructorFunc> globalDestructors
}

class Verb_ing < Present Participle > {
	+{static} Verb_ing *create()
	- -
	#Verb_ing()
	#{abstract} ~Verb_ing()
	- -
	-Verb_ing(const Verb_ing &) : Processing("")
	-Verb_ing &operator=(const Verb_ing &)
	-Success initialize()
	-Success process()
	-Success shutdown()
	-void processInfo(char *pBuf, char *pBufEnd)
}

Processing "1" o-u- "0..*" Processing
Processing <|- - Verb_ing

footer **Processing()** Class Diagram - Detailed \n(C) DSP-Crowd Electronics GmbH

@enduml

PlantUML version 1.2022.7(Mon Aug 22 19:01:30 CEST 2022)
(GPL source distribution)
Java Runtime: OpenJDK Runtime Environment
JVM: OpenJDK 64-Bit Server VM
Default Encoding: UTF-8
Language: en
Country: US
--></g></svg>